---
name: Build and Deploy container image to Amazon Lambda
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - 'features/**'

env:
  AWS_REGION: ap-northeast-1

permissions:
  id-token: write
  contents: write
  issues: write
  pull-requests: write

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    environment: dev
    outputs:
      build-image: ${{ steps.build-image.outputs.image }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        # with:
        #   platforms: 'arm64,arm'

      - name: Setup buildx action
        uses: docker/setup-buildx-action@v2

      - name: Setup mold
        uses: rui314/setup-mold@v1

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-${{ github.run_id }}-${{ github.run_number }}
          mask-aws-account-id: no

      - run: aws sts get-caller-identity

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        uses: docker/build-push-action@v3
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: practice
          IMAGE_TAG: ${{ github.sha }}
        with:
          # Build a docker container and push image to Amazon ECR
          context: ./container/
          # file: ./container/docker/arm64.Dockerfile
          file: ./container/docker/x86_64.Dockerfile
          # platforms: linux/arm64/v8
          platforms: linux/x86_64
          push: true
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # cache-from: type=registry,ref=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:buildcache
          # cache-to: type=registry,ref=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:buildcache,mode=max
        # env:
        #   ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        #   ECR_REPOSITORY: practice
        #   IMAGE_TAG: ${{ github.sha }}
        # run: |
        #   # Build a docker container and push image to Amazon ECR
        #   # docker build --cache-from="$ECR_REGISTRY/$ECR_REPOSITORY:latest" \
        #   docker build \
        #               -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
        #               --platform linux/arm64 \
        #               -f ./container/docker/arm64.Dockerfile \
        #               ./container/
        #   docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        #   echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
